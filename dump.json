[
  {
    "__docId__": 0,
    "kind": "file",
    "name": "src/config.js",
    "content": "import path from 'path'\nimport finder from 'find-package-json'\n\nconst filename = (require.main && require.main.filename) || __dirname\nconst projectPath = path.dirname(filename)\nconst userConfig = finder(projectPath).next().value.timber\n\n/**\n * The configuration options here are use throughout the timber library.\n * Any of the values can be changed in two different ways:\n *\n * ## Using your package.json\n *\n * To configure timber from your `package.json`, simply add a `timber`\n * object at the root level containing your desired overrides:\n *\n * ```json\n * \"timber\": {\n *   \"capture_request_body\": true,\n *   \"capture_response_body\": true\n * },\n * ```\n *\n * __Note:__ you cannot set the `debug_logger` option from the `package.json`.\n * This is because you must set it as a writeable stream.\n *\n * ## Using inline overrides\n *\n * You can also configure timber by overriding the config options inline:\n *\n * ```js\n * const timber = require('timber');\n * timber.config.debug_logger = process.stdout;\n * ```\n *\n * __Note:__ inline overrides will override any options you have set\n * in your `package.json` file.\n *\n * @param {String} metadata_delimiter - delimiter between log message and log data (@metadata by default)\n * @param {boolean} append_metadata - append @metadata { ... } to all logs (on by default)\n * @param {Writable} debug_logger - a writeable stream for internal debug messages to be sent to (disabled when underined)\n * @param {boolean} capture_request_body - whether the http request body data will be captured (off by default)\n * @param {boolean} capture_request_body - whether the http response body data will be captured (off by default)\n */\nconst config = {\n  metadata_delimiter: '@metadata',\n  append_metadata: true,\n  debug_logger: undefined,\n  capture_request_body: false,\n  capture_response_body: false,\n  ...userConfig,\n}\n\nexport default config\n",
    "static": true,
    "longname": "src/config.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1,
    "kind": "variable",
    "name": "filename",
    "memberof": "src/config.js",
    "static": true,
    "longname": "src/config.js~filename",
    "access": null,
    "export": false,
    "importPath": "timber/src/config.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2,
    "kind": "variable",
    "name": "projectPath",
    "memberof": "src/config.js",
    "static": true,
    "longname": "src/config.js~projectPath",
    "access": null,
    "export": false,
    "importPath": "timber/src/config.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 3,
    "kind": "variable",
    "name": "userConfig",
    "memberof": "src/config.js",
    "static": true,
    "longname": "src/config.js~userConfig",
    "access": null,
    "export": false,
    "importPath": "timber/src/config.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 4,
    "kind": "variable",
    "name": "config",
    "memberof": "src/config.js",
    "static": true,
    "longname": "src/config.js~config",
    "access": null,
    "export": true,
    "importPath": "timber/src/config.js",
    "importStyle": "config",
    "description": "The configuration options here are use throughout the timber library.\nAny of the values can be changed in two different ways:\n\n## Using your package.json\n\nTo configure timber from your `package.json`, simply add a `timber`\nobject at the root level containing your desired overrides:\n\n```json\n\"timber\": {\n  \"capture_request_body\": true,\n  \"capture_response_body\": true\n},\n```\n\n__Note:__ you cannot set the `debug_logger` option from the `package.json`.\nThis is because you must set it as a writeable stream.\n\n## Using inline overrides\n\nYou can also configure timber by overriding the config options inline:\n\n```js\nconst timber = require('timber');\ntimber.config.debug_logger = process.stdout;\n```\n\n__Note:__ inline overrides will override any options you have set\nin your `package.json` file.",
    "lineNumber": 45,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "metadata_delimiter",
        "description": "delimiter between log message and log data (@metadata by default)"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "append_metadata",
        "description": "append @metadata { ... } to all logs (on by default)"
      },
      {
        "nullable": null,
        "types": [
          "Writable"
        ],
        "spread": false,
        "optional": false,
        "name": "debug_logger",
        "description": "a writeable stream for internal debug messages to be sent to (disabled when underined)"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "capture_request_body",
        "description": "whether the http request body data will be captured (off by default)"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "capture_request_body",
        "description": "whether the http response body data will be captured (off by default)"
      }
    ],
    "type": {
      "types": [
        "{\"metadata_delimiter\": string, \"append_metadata\": boolean, \"debug_logger\": *, \"capture_request_body\": *, \"capture_response_body\": *, ...userConfig: Object}"
      ]
    }
  },
  {
    "__docId__": 5,
    "kind": "file",
    "name": "src/console.js",
    "content": "import util from 'util'\nimport Log from './log'\nimport config from './config'\n\n/**\n * Transforms an ordinary console.log message into a structured Log object\n * It also allows you to pass a Log object directly to a console.log function\n * It will automatically detect whether or not you are passing a structured\n * log into the console before attempting to transform it.\n *\n * This is also what is responsible for assigning the correct level to the log\n *\n * @param {Array} args - argument list passed to console\n * @param {String} level - `info` `warn` `error` `debug` `fatal`\n */\nconst transformConsoleLog = ({ args, level }) => {\n  const log = args[0] instanceof Log\n    ? args[0]\n    : new Log(`${util.format.apply(null, args)}\\n`)\n  log.setLevel(level)\n  return log.format({ withMetadata: config.append_metadata })\n}\n\nconsole.info = (...args) => {\n  process.stdout.write(transformConsoleLog({ args, level: 'info' }))\n}\n\nconsole.log = (...args) => {\n  process.stdout.write(transformConsoleLog({ args, level: 'info' }))\n}\n\nconsole.warn = (...args) => {\n  process.stdout.write(transformConsoleLog({ args, level: 'warn' }))\n}\n\nconsole.error = (...args) => {\n  process.stderr.write(transformConsoleLog({ args, level: 'error' }))\n}\n\nexport default console\n",
    "static": true,
    "longname": "src/console.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 6,
    "kind": "function",
    "name": "transformConsoleLog",
    "memberof": "src/console.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/console.js~transformConsoleLog",
    "access": null,
    "export": false,
    "importPath": "timber/src/console.js",
    "importStyle": null,
    "description": "Transforms an ordinary console.log message into a structured Log object\nIt also allows you to pass a Log object directly to a console.log function\nIt will automatically detect whether or not you are passing a structured\nlog into the console before attempting to transform it.\n\nThis is also what is responsible for assigning the correct level to the log",
    "lineNumber": 16,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "args",
        "description": "argument list passed to console"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "level",
        "description": "`info` `warn` `error` `debug` `fatal`"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 7,
    "kind": "file",
    "name": "src/context.js",
    "content": "/**\n * This is the base class for all context types\n */\nclass Context {\n  /**\n   * required checks for the existence of the given attributes.\n   * If any of the values provided are undefined, an error will be thrown\n   *\n   * @private\n   * @param {object} attributes - key/value pair of required attributes\n   */\n  required(attributes) {\n    for (const attribute in attributes) {\n      if (!attributes[attribute]) {\n        throw new Error(`${attribute} is required`)\n      }\n    }\n  }\n}\n\nexport default Context\n",
    "static": true,
    "longname": "src/context.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 8,
    "kind": "class",
    "name": "Context",
    "memberof": "src/context.js",
    "static": true,
    "longname": "src/context.js~Context",
    "access": null,
    "export": true,
    "importPath": "timber/src/context.js",
    "importStyle": "Context",
    "description": "This is the base class for all context types",
    "lineNumber": 4,
    "interface": false
  },
  {
    "__docId__": 9,
    "kind": "method",
    "name": "required",
    "memberof": "src/context.js~Context",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/context.js~Context#required",
    "access": "private",
    "description": "required checks for the existence of the given attributes.\nIf any of the values provided are undefined, an error will be thrown",
    "lineNumber": 12,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "attributes",
        "description": "key/value pair of required attributes"
      }
    ]
  },
  {
    "__docId__": 10,
    "kind": "file",
    "name": "src/contexts/http.js",
    "content": "import Context from '../context'\n\n/**\n * The HTTP context adds data about the current HTTP request being processed\n * to your logs.This allows you to tail and filter by this data.\n */\nclass HTTP extends Context {\n  static keyspace = 'http'\n\n  constructor({ method, path, remote_addr, request_id } = {}) {\n    super()\n\n    // check for required attributes\n    this.required({ method, path })\n\n    // bind context attributes to the class\n    this.method = method\n    this.path = path\n    this.remote_addr = remote_addr\n    this.request_id = request_id\n  }\n}\n\nexport default HTTP\n",
    "static": true,
    "longname": "src/contexts/http.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 11,
    "kind": "class",
    "name": "HTTP",
    "memberof": "src/contexts/http.js",
    "static": true,
    "longname": "src/contexts/http.js~HTTP",
    "access": null,
    "export": true,
    "importPath": "timber/src/contexts/http.js",
    "importStyle": "HTTP",
    "description": "The HTTP context adds data about the current HTTP request being processed\nto your logs.This allows you to tail and filter by this data.",
    "lineNumber": 7,
    "interface": false,
    "extends": [
      "src/context.js~Context"
    ]
  },
  {
    "__docId__": 12,
    "kind": "member",
    "name": "keyspace",
    "memberof": "src/contexts/http.js~HTTP",
    "static": true,
    "longname": "src/contexts/http.js~HTTP.keyspace",
    "access": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 13,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/contexts/http.js~HTTP",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/contexts/http.js~HTTP#constructor",
    "access": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "objectPattern",
        "optional": true,
        "types": [
          "{\"method\": *, \"path\": *, \"remote_addr\": *, \"request_id\": *}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      }
    ]
  },
  {
    "__docId__": 14,
    "kind": "member",
    "name": "method",
    "memberof": "src/contexts/http.js~HTTP",
    "static": false,
    "longname": "src/contexts/http.js~HTTP#method",
    "access": null,
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 15,
    "kind": "member",
    "name": "path",
    "memberof": "src/contexts/http.js~HTTP",
    "static": false,
    "longname": "src/contexts/http.js~HTTP#path",
    "access": null,
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 16,
    "kind": "member",
    "name": "remote_addr",
    "memberof": "src/contexts/http.js~HTTP",
    "static": false,
    "longname": "src/contexts/http.js~HTTP#remote_addr",
    "access": null,
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 17,
    "kind": "member",
    "name": "request_id",
    "memberof": "src/contexts/http.js~HTTP",
    "static": false,
    "longname": "src/contexts/http.js~HTTP#request_id",
    "access": null,
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 18,
    "kind": "file",
    "name": "src/event.js",
    "content": "/**\n * This is the base class for all event types\n */\nclass Event {\n  /**\n   * required checks for the existence of the given attributes.\n   * If any of the values provided are undefined, an error will be thrown\n   *\n   * @private\n   * @param {object} attributes - key/value pair of required attributes\n   */\n  required(attributes) {\n    for (const attribute in attributes) {\n      if (!attributes[attribute] && attributes[attribute] !== 0) {\n        throw new Error(`${attribute} is required`)\n      }\n    }\n  }\n}\n\nexport default Event\n",
    "static": true,
    "longname": "src/event.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 19,
    "kind": "class",
    "name": "Event",
    "memberof": "src/event.js",
    "static": true,
    "longname": "src/event.js~Event",
    "access": null,
    "export": true,
    "importPath": "timber/src/event.js",
    "importStyle": "Event",
    "description": "This is the base class for all event types",
    "lineNumber": 4,
    "interface": false
  },
  {
    "__docId__": 20,
    "kind": "method",
    "name": "required",
    "memberof": "src/event.js~Event",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/event.js~Event#required",
    "access": "private",
    "description": "required checks for the existence of the given attributes.\nIf any of the values provided are undefined, an error will be thrown",
    "lineNumber": 12,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "attributes",
        "description": "key/value pair of required attributes"
      }
    ]
  },
  {
    "__docId__": 21,
    "kind": "file",
    "name": "src/events/http_server_request.js",
    "content": "import Event from '../event'\n\n/**\n * The HTTP server request event tracks incoming HTTP requests to your HTTP server.\n */\nclass HTTPServerRequest extends Event {\n  /**\n   * @param {String} [body] - the body of the request\n   * @param {Array} [headers] - the headers of the request\n   * @param {String} host - the server's hostname\n   * @param {String} method - `CONNECT` `DELETE` `GET` `HEAD` `OPTIONS` `PATCH` `POST` `PUT` `TRACE`\n   * @param {String} [path] - the path of the request\n   * @param {Number} [port] - the port of the request\n   * @param {String} [query_string] - the query parameters present on the url\n   * @param {String} [request_id] - the uuid attached to the request\n   * @param {String} scheme - `HTTP` or `HTTPS`\n   */\n  constructor(\n    {\n      body,\n      headers,\n      host,\n      method,\n      path,\n      port,\n      query_string,\n      request_id,\n      scheme,\n    } = {}\n  ) {\n    super()\n\n    // check for required attributes\n    this.required({ host, method, scheme })\n\n    // bind context attributes to the class\n    this.body = body\n    this.headers = headers\n    this.host = host\n    this.method = method\n    this.path = path\n    this.port = port\n    this.query_string = query_string\n    this.request_id = request_id\n    this.scheme = scheme\n  }\n\n  message = () => `Started ${this.method} \"${this.path}\"`\n}\n\nexport default HTTPServerRequest\n",
    "static": true,
    "longname": "src/events/http_server_request.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 22,
    "kind": "class",
    "name": "HTTPServerRequest",
    "memberof": "src/events/http_server_request.js",
    "static": true,
    "longname": "src/events/http_server_request.js~HTTPServerRequest",
    "access": null,
    "export": true,
    "importPath": "timber/src/events/http_server_request.js",
    "importStyle": "HTTPServerRequest",
    "description": "The HTTP server request event tracks incoming HTTP requests to your HTTP server.",
    "lineNumber": 6,
    "interface": false,
    "extends": [
      "src/event.js~Event"
    ]
  },
  {
    "__docId__": 23,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/events/http_server_request.js~HTTPServerRequest",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/events/http_server_request.js~HTTPServerRequest#constructor",
    "access": null,
    "description": "",
    "lineNumber": 18,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "name": "body",
        "description": "the body of the request"
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": true,
        "name": "headers",
        "description": "the headers of the request"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "host",
        "description": "the server's hostname"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "method",
        "description": "`CONNECT` `DELETE` `GET` `HEAD` `OPTIONS` `PATCH` `POST` `PUT` `TRACE`"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "name": "path",
        "description": "the path of the request"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": true,
        "name": "port",
        "description": "the port of the request"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "name": "query_string",
        "description": "the query parameters present on the url"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "name": "request_id",
        "description": "the uuid attached to the request"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "scheme",
        "description": "`HTTP` or `HTTPS`"
      }
    ]
  },
  {
    "__docId__": 24,
    "kind": "member",
    "name": "body",
    "memberof": "src/events/http_server_request.js~HTTPServerRequest",
    "static": false,
    "longname": "src/events/http_server_request.js~HTTPServerRequest#body",
    "access": null,
    "description": null,
    "lineNumber": 37,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 25,
    "kind": "member",
    "name": "headers",
    "memberof": "src/events/http_server_request.js~HTTPServerRequest",
    "static": false,
    "longname": "src/events/http_server_request.js~HTTPServerRequest#headers",
    "access": null,
    "description": null,
    "lineNumber": 38,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 26,
    "kind": "member",
    "name": "host",
    "memberof": "src/events/http_server_request.js~HTTPServerRequest",
    "static": false,
    "longname": "src/events/http_server_request.js~HTTPServerRequest#host",
    "access": null,
    "description": null,
    "lineNumber": 39,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 27,
    "kind": "member",
    "name": "method",
    "memberof": "src/events/http_server_request.js~HTTPServerRequest",
    "static": false,
    "longname": "src/events/http_server_request.js~HTTPServerRequest#method",
    "access": null,
    "description": null,
    "lineNumber": 40,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 28,
    "kind": "member",
    "name": "path",
    "memberof": "src/events/http_server_request.js~HTTPServerRequest",
    "static": false,
    "longname": "src/events/http_server_request.js~HTTPServerRequest#path",
    "access": null,
    "description": null,
    "lineNumber": 41,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 29,
    "kind": "member",
    "name": "port",
    "memberof": "src/events/http_server_request.js~HTTPServerRequest",
    "static": false,
    "longname": "src/events/http_server_request.js~HTTPServerRequest#port",
    "access": null,
    "description": null,
    "lineNumber": 42,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 30,
    "kind": "member",
    "name": "query_string",
    "memberof": "src/events/http_server_request.js~HTTPServerRequest",
    "static": false,
    "longname": "src/events/http_server_request.js~HTTPServerRequest#query_string",
    "access": null,
    "description": null,
    "lineNumber": 43,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 31,
    "kind": "member",
    "name": "request_id",
    "memberof": "src/events/http_server_request.js~HTTPServerRequest",
    "static": false,
    "longname": "src/events/http_server_request.js~HTTPServerRequest#request_id",
    "access": null,
    "description": null,
    "lineNumber": 44,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 32,
    "kind": "member",
    "name": "scheme",
    "memberof": "src/events/http_server_request.js~HTTPServerRequest",
    "static": false,
    "longname": "src/events/http_server_request.js~HTTPServerRequest#scheme",
    "access": null,
    "description": null,
    "lineNumber": 45,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 33,
    "kind": "member",
    "name": "message",
    "memberof": "src/events/http_server_request.js~HTTPServerRequest",
    "static": false,
    "longname": "src/events/http_server_request.js~HTTPServerRequest#message",
    "access": null,
    "description": null,
    "lineNumber": 48,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 34,
    "kind": "file",
    "name": "src/events/http_server_response.js",
    "content": "import Event from '../event'\n\n/**\n * The HTTP server request event tracks incoming HTTP requests to your HTTP server.\n */\nclass HTTPServerResponse extends Event {\n  /**\n   * @param {String} [body] - the body of the request\n   * @param {Array} [headers] - the headers of the request\n   * @param {String} [request_id] - the uuid of the request\n   * @param {String} status - the HTTP status code\n   * @param {String} time_ms - the total duration of the request in milliseconds\n   */\n  constructor({ body, headers, request_id, status, time_ms } = {}) {\n    super()\n\n    // check for required attributes\n    this.required({ status, time_ms })\n\n    // bind context attributes to the class\n    this.body = body\n    this.headers = headers\n    this.request_id = request_id\n    this.status = status\n    this.time_ms = time_ms\n  }\n\n  message() {\n    const parts = ['Outgoing HTTP response']\n\n    if (this.service_name) {\n      parts.push(`from ${this.service_name}`)\n    }\n\n    parts.push(`${this.status} in ${this.time_ms}ms`)\n\n    return parts.join(' ')\n  }\n}\n\nexport default HTTPServerResponse\n",
    "static": true,
    "longname": "src/events/http_server_response.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 35,
    "kind": "class",
    "name": "HTTPServerResponse",
    "memberof": "src/events/http_server_response.js",
    "static": true,
    "longname": "src/events/http_server_response.js~HTTPServerResponse",
    "access": null,
    "export": true,
    "importPath": "timber/src/events/http_server_response.js",
    "importStyle": "HTTPServerResponse",
    "description": "The HTTP server request event tracks incoming HTTP requests to your HTTP server.",
    "lineNumber": 6,
    "interface": false,
    "extends": [
      "src/event.js~Event"
    ]
  },
  {
    "__docId__": 36,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/events/http_server_response.js~HTTPServerResponse",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/events/http_server_response.js~HTTPServerResponse#constructor",
    "access": null,
    "description": "",
    "lineNumber": 14,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "name": "body",
        "description": "the body of the request"
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": true,
        "name": "headers",
        "description": "the headers of the request"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "name": "request_id",
        "description": "the uuid of the request"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "status",
        "description": "the HTTP status code"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "time_ms",
        "description": "the total duration of the request in milliseconds"
      }
    ]
  },
  {
    "__docId__": 37,
    "kind": "member",
    "name": "body",
    "memberof": "src/events/http_server_response.js~HTTPServerResponse",
    "static": false,
    "longname": "src/events/http_server_response.js~HTTPServerResponse#body",
    "access": null,
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 38,
    "kind": "member",
    "name": "headers",
    "memberof": "src/events/http_server_response.js~HTTPServerResponse",
    "static": false,
    "longname": "src/events/http_server_response.js~HTTPServerResponse#headers",
    "access": null,
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 39,
    "kind": "member",
    "name": "request_id",
    "memberof": "src/events/http_server_response.js~HTTPServerResponse",
    "static": false,
    "longname": "src/events/http_server_response.js~HTTPServerResponse#request_id",
    "access": null,
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 40,
    "kind": "member",
    "name": "status",
    "memberof": "src/events/http_server_response.js~HTTPServerResponse",
    "static": false,
    "longname": "src/events/http_server_response.js~HTTPServerResponse#status",
    "access": null,
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 41,
    "kind": "member",
    "name": "time_ms",
    "memberof": "src/events/http_server_response.js~HTTPServerResponse",
    "static": false,
    "longname": "src/events/http_server_response.js~HTTPServerResponse#time_ms",
    "access": null,
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 42,
    "kind": "method",
    "name": "message",
    "memberof": "src/events/http_server_response.js~HTTPServerResponse",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/events/http_server_response.js~HTTPServerResponse#message",
    "access": null,
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 43,
    "kind": "file",
    "name": "src/index.js",
    "content": "// This is the main file that gets referenced by node\nimport attach from './utils/attach'\nimport config from './config'\nimport install from './install'\nimport middlewares from './middlewares'\nimport transports from './transports'\nimport log from './log'\nimport './console'\n\nmodule.exports = {\n  attach,\n  config,\n  install,\n  middlewares,\n  transports,\n  log,\n}\n",
    "static": true,
    "longname": "src/index.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 44,
    "kind": "file",
    "name": "src/install.js",
    "content": "import attach from './utils/attach'\n\n/**\n * Installs the timber logger to route all stdout logs to the provided stream\n *\n * @param {Stream} transport - the stream that all logs will go through\n */\nfunction install(transport) {\n  if (!transport) throw Error('No transport was provided.')\n\n  // attach our transport stream to stdout/stderr\n  attach([transport], process.stdout)\n  attach([transport], process.stderr)\n}\n\nexport default install\n",
    "static": true,
    "longname": "src/install.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 45,
    "kind": "function",
    "name": "install",
    "memberof": "src/install.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/install.js~install",
    "access": null,
    "export": true,
    "importPath": "timber/src/install.js",
    "importStyle": "install",
    "description": "Installs the timber logger to route all stdout logs to the provided stream",
    "lineNumber": 8,
    "params": [
      {
        "nullable": null,
        "types": [
          "Stream"
        ],
        "spread": false,
        "optional": false,
        "name": "transport",
        "description": "the stream that all logs will go through"
      }
    ]
  },
  {
    "__docId__": 46,
    "kind": "file",
    "name": "src/log.js",
    "content": "import schema from './schema'\nimport config from './config'\n\n/**\n * Transforms a log message or object into a rich structured format\n * that timber expects, ex 'log message' @timber.io {\"dt\": \"…\", \"level\": \"info\", \"context\": {…}}\n * see https://github.com/timberio/log-event-json-schema for specs\n */\nclass Log {\n  /**\n   * @param {String} message - the log message before transforming\n   * @param {Object} [context] - context to be attached to message\n   */\n  constructor(message, context = {}) {\n    // Throw an error if no message is provided\n    if (!message) throw new Error('You must supply a message when creating a log')\n\n    /**\n     * Reference to original log message\n     * @type {String}\n     */\n    this.raw = message\n\n    /**\n     * Structured log data\n     * @type {Date}\n     */\n    this.data = {\n      ...schema,\n      message,\n      dt: new Date(),\n      ...context,\n    }\n  }\n\n  /**\n   * Appends data to the end of the structured log object\n   *\n   * @param {Object} data\n   */\n  append(data) {\n    this.data = {\n      ...this.data,\n      ...data,\n    }\n  }\n\n  /**\n   * Convenience function for setting the log level\n   *\n   * @param {String} level - `info` `warn` `error` `debug`\n   */\n  setLevel(level) {\n    this.append({ level })\n  }\n\n  /**\n   * Transforms the structured log into a string\n   * i.e. `Log message @metadata { ... }`\n   */\n  format({ withMetadata = true } = {}) {\n    let message = this.raw.endsWith('\\n')\n      ? this.raw.substring(0, this.raw.length - 1)\n      : this.raw\n\n    if (withMetadata) {\n      message += ` ${config.metadata_delimiter} ${JSON.stringify(this.data)}`\n    }\n\n    return `${message}\\n`\n  }\n}\n\nexport default Log\n",
    "static": true,
    "longname": "src/log.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 47,
    "kind": "class",
    "name": "Log",
    "memberof": "src/log.js",
    "static": true,
    "longname": "src/log.js~Log",
    "access": null,
    "export": true,
    "importPath": "timber/src/log.js",
    "importStyle": "Log",
    "description": "Transforms a log message or object into a rich structured format\nthat timber expects, ex 'log message' @timber.io {\"dt\": \"…\", \"level\": \"info\", \"context\": {…}}\nsee https://github.com/timberio/log-event-json-schema for specs",
    "lineNumber": 9,
    "interface": false
  },
  {
    "__docId__": 48,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/log.js~Log",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/log.js~Log#constructor",
    "access": null,
    "description": "",
    "lineNumber": 14,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "message",
        "description": "the log message before transforming"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "context",
        "description": "context to be attached to message"
      }
    ]
  },
  {
    "__docId__": 49,
    "kind": "member",
    "name": "raw",
    "memberof": "src/log.js~Log",
    "static": false,
    "longname": "src/log.js~Log#raw",
    "access": null,
    "description": "Reference to original log message",
    "lineNumber": 22,
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 50,
    "kind": "member",
    "name": "data",
    "memberof": "src/log.js~Log",
    "static": false,
    "longname": "src/log.js~Log#data",
    "access": null,
    "description": "Structured log data",
    "lineNumber": 28,
    "type": {
      "nullable": null,
      "types": [
        "Date"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 51,
    "kind": "method",
    "name": "append",
    "memberof": "src/log.js~Log",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/log.js~Log#append",
    "access": null,
    "description": "Appends data to the end of the structured log object",
    "lineNumber": 41,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 52,
    "kind": "member",
    "name": "data",
    "memberof": "src/log.js~Log",
    "static": false,
    "longname": "src/log.js~Log#data",
    "access": null,
    "description": null,
    "lineNumber": 42,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "{...undefined: Object, ...data: Object}"
      ]
    }
  },
  {
    "__docId__": 53,
    "kind": "method",
    "name": "setLevel",
    "memberof": "src/log.js~Log",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/log.js~Log#setLevel",
    "access": null,
    "description": "Convenience function for setting the log level",
    "lineNumber": 53,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "level",
        "description": "`info` `warn` `error` `debug`"
      }
    ]
  },
  {
    "__docId__": 54,
    "kind": "method",
    "name": "format",
    "memberof": "src/log.js~Log",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/log.js~Log#format",
    "access": null,
    "description": "Transforms the structured log into a string\ni.e. `Log message @metadata { ... }`",
    "lineNumber": 61,
    "params": [
      {
        "name": "objectPattern",
        "optional": true,
        "types": [
          "{\"withMetadata\": *}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      }
    ],
    "return": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 55,
    "kind": "file",
    "name": "src/middlewares/express.js",
    "content": "// import transform from '../transform'\nimport compose from 'composable-middleware'\nimport addRequestId from 'express-request-id'\nimport bodyParser from 'body-parser'\nimport config from '../config'\nimport HTTP from '../contexts/http'\nimport HTTPServerRequest from '../events/http_server_request'\nimport HTTPServerResponse from '../events/http_server_response'\nimport Log from '../log'\n\n/**\n * The express middleware takes care of automatically logging\n * each http event with the appropriate context events attached.\n *\n * This middleware is composed of three separate middlewares:\n * - `addRequestId` automatically attaches a unique uuid to every request\n * - `bodyParser` allows parsing of JSON encoded request bodies\n * - `expressMiddleware` automatically logs http events to timber\n *\n * @param {object} req - the request object\n * @param {object} res - the response object\n * @param {function} next - the next middleware to run\n*/\nconst expressMiddleware = compose(\n  addRequestId(),\n  bodyParser.json(),\n  (req, res, next) => {\n    // save a reference of the start time so that we can determine\n    // the amount of time each http request takes\n    req.start_time = new Date().getTime()\n\n    // destructure the request object for ease of use\n    const {\n      headers: { host, ...headers },\n      method,\n      id: request_id,\n      path,\n      protocol: scheme,\n      body: reqBody,\n      connection,\n    } = req\n\n    // determine the ip address of the client\n    // https://stackoverflow.com/a/10849772\n    const remote_addr = headers['x-forwarded-for'] || connection.remoteAddress\n\n    // send the request body if the capture_request_body flag is true (off by default)\n    // and the request body is not empty\n    let body = config.capture_request_body && Object.keys(reqBody).length > 0\n      ? JSON.stringify(reqBody)\n      : undefined\n\n    // create the HTTP context item\n    const http = new HTTP({\n      method,\n      path,\n      request_id,\n      remote_addr,\n    })\n\n    // add the http context information to the metadata object\n    const metadata = {\n      context: {\n        http,\n      },\n    }\n\n    const http_server_request = new HTTPServerRequest({\n      body,\n      host,\n      path,\n      request_id,\n      scheme,\n      method,\n    })\n\n    // add the http_server_request event to the metadata object\n    metadata.event = { server_side_app: { http_server_request } }\n\n    // add an event to get  triggered when the request finishes\n    // this event will send the http_client_response event to timber\n    req.on('end', () => {\n      // destructure the response object for ease of use\n      const { body: resBody, statusCode: status } = res\n\n      // calculate the duration of the http request\n      const time_ms = new Date().getTime() - req.start_time\n\n      // send the response body if the capture_response_body flag is true (off by default)\n      body = config.capture_response_body ? JSON.stringify(resBody) : undefined\n\n      const http_server_response = new HTTPServerResponse({\n        request_id,\n        time_ms,\n        status,\n        body,\n      })\n\n      // add the http_server_response event to the metadata object\n      metadata.event = { server_side_app: { http_server_response } }\n\n      // log the http response with metadata\n      console.info(new Log(http_server_response.message(), metadata))\n    })\n\n    // log the http request with metadata\n    console.info(new Log(http_server_request.message(), metadata))\n    next()\n  }\n)\n\nexport default expressMiddleware\n",
    "static": true,
    "longname": "src/middlewares/express.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 56,
    "kind": "variable",
    "name": "expressMiddleware",
    "memberof": "src/middlewares/express.js",
    "static": true,
    "longname": "src/middlewares/express.js~expressMiddleware",
    "access": null,
    "export": true,
    "importPath": "timber/src/middlewares/express.js",
    "importStyle": "expressMiddleware",
    "description": "The express middleware takes care of automatically logging\neach http event with the appropriate context events attached.\n\nThis middleware is composed of three separate middlewares:\n- `addRequestId` automatically attaches a unique uuid to every request\n- `bodyParser` allows parsing of JSON encoded request bodies\n- `expressMiddleware` automatically logs http events to timber",
    "lineNumber": 24,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "req",
        "description": "the request object"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "the response object"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "next",
        "description": "the next middleware to run"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 57,
    "kind": "file",
    "name": "src/middlewares/index.js",
    "content": "import express from './express'\nimport koa from './koa'\n\nexport default { express, koa }\n",
    "static": true,
    "longname": "src/middlewares/index.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 58,
    "kind": "file",
    "name": "src/middlewares/koa.js",
    "content": "",
    "static": true,
    "longname": "src/middlewares/koa.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 59,
    "kind": "file",
    "name": "src/schema.js",
    "content": "// look into https://github.com/jquense/yup or\n// http://epoberezkin.github.io/ajv/#performancefor schema normalization/coercion\n\nexport default {\n  $schema:\n    'https://raw.githubusercontent.com/timberio/log-event-json-schema/1.2.3/schema.json',\n  message: '',\n}\n",
    "static": true,
    "longname": "src/schema.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 60,
    "kind": "file",
    "name": "src/transports/https.js",
    "content": "import https from 'https'\nimport { Writable } from 'stream'\nimport debug from '../utils/debug'\nconst HOSTNAME = 'logs.timber.io'\nconst PATH = '/frames'\nconst CONTENT_TYPE = 'application/json'\nconst USER_AGENT = `Timber Node HTTPS Stream/${require('../../package.json')\n  .version}`\nconst PORT = 443\n\n/**\n * A highly efficient stream for sending logs to Timber via HTTPS. It uses batches,\n * keep-alive connections (and in the future maybe msgpack) to deliver logs with high-throughput\n * and little overhead. It also implements the Stream.Writable interface so that it can be treated\n * like a stream. This is beneficial when using something like Morgan, where you can pass a custom stream.\n */\nclass HTTPS extends Writable {\n  /**\n   * @param {string} apiKey - Timber API Key\n   * @param {Object} [options] - Various options to adjust the stream behavior.\n   * @param {string} [options.flushInterval=1000] - How often, in milliseconds, the messages written to the stream should be delivered to Timber.\n   * @param {string} [options.httpsAgent] - Your own custom https.Agent. We use agents to maintain connection pools and keep the connections alive. This avoids the initial connection overhead every time we want to communicate with Timber. See https.Agent for options.\n   */\n  constructor(\n    apiKey,\n    {\n      flushInterval = 1000,\n      highWaterMark = 5000,\n      httpsAgent,\n      httpsClient,\n      hostName = HOSTNAME,\n      path = PATH,\n      port = PORT,\n    } = {}\n  ) {\n    // Ensure we use object mode and set a default highWaterMark\n    super({ objectMode: true, highWaterMark })\n    debug('Initializing HTTPS transport stream')\n\n    this.acceptsObject = true\n    this.apiKey = apiKey\n    this.hostName = hostName\n    this.path = path\n    this.port = port\n    this.flushInterval = flushInterval\n    this.httpsAgent =\n      httpsAgent ||\n      new https.Agent({\n        maxSockets: 5,\n      })\n    this.httpsClient = httpsClient || https\n\n    // Cork the stream so we can utilize the internal Buffer. We do *not* want to\n    // send a request for every message. The _flusher will take care of flushing the stream\n    // on an interval.\n    this.cork()\n\n    // In the event the _flusher is not fast enough, we need to monitor the buffer size.\n    // If it fills before the next flush event, we should immediately flush.\n\n    if (flushInterval !== undefined && flushInterval > 0) {\n      debug('Starting stream flusher')\n      this._startFlusher()\n    }\n  }\n\n  /**\n   * _writev is a Stream.Writeable methods that, if present, will write multiple chunks of\n   * data off of the buffer. Defining it means we do not need to define _write.\n   */\n  _writev(chunks, next) {\n    debug(`Sending ${chunks.length} log to stream`)\n    const messages = chunks.map(chunk => chunk.chunk)\n    const body = JSON.stringify(messages)\n    const options = {\n      headers: {\n        'Content-Type': CONTENT_TYPE,\n        'User-Agent': USER_AGENT,\n      },\n      agent: this.httpsAgent,\n      auth: this.apiKey,\n      hostname: this.hostName,\n      port: this.port,\n      path: this.path,\n      method: 'POST',\n    }\n\n    // Add debug outputs for every possible request event\n    // This should help debugging network related issues\n    debug(`Instantiating req object`)\n    const req = this.httpsClient.request(options, res => {\n      debug(`${this.hostName} responded with ${res.statusCode}`)\n      res.on('aborted', () => debug('Response event: aborted'))\n      res.on('close', () => debug('Response event: close'))\n    })\n\n    req.on('abort', () => debug('Request event: abort'))\n    req.on('aborted', () => debug('Request event: aborted'))\n    req.on('connect', () => debug('Request event: connect'))\n    req.on('continue', () => debug('Request event: continue'))\n    req.on('response', () => debug('Request event: response'))\n    req.on('socket', sock => {\n      debug('Request event: socket')\n      sock.on('close', () => debug('Socket event: close'))\n      sock.on('connect', () => debug('Socket event: connect'))\n      sock.on('data', () => sock.end())\n      sock.on('drain', () => debug('Socket event: drain'))\n      sock.on('end', () => debug('Socket event: end'))\n      sock.on('error', () => debug('Socket event: error'))\n      sock.on('lookup', () => debug('Socket event: lookup'))\n      sock.on('drain', () => debug('Socket event: drain'))\n    })\n    req.on('upgrade', () => debug('Request event: upgrade'))\n\n    req.write(body)\n    req.end()\n    next()\n  }\n\n  _write(chunk, encoding, next) {\n    this._writev([{ chunk, encoding }], next)\n  }\n\n  /**\n   * Expressive function to flush the buffer contents. uncork flushes the buffer and write\n   * the contents. Cork allows us to continue buffering the messages until the next flush.\n   */\n  _flush() {\n    // nextTick is recommended here to allow batching of write calls I think\n    process.nextTick(() => {\n      this.uncork()\n      this.cork()\n    })\n  }\n\n  /**\n   * Interval to call _flush continuously. This ensures log lines get sent on this.flushInterval\n   * intervals.\n   */\n  _startFlusher() {\n    setInterval(() => this._flush(), this.flushInterval)\n  }\n}\n\nexport default HTTPS\n",
    "static": true,
    "longname": "src/transports/https.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 61,
    "kind": "variable",
    "name": "HOSTNAME",
    "memberof": "src/transports/https.js",
    "static": true,
    "longname": "src/transports/https.js~HOSTNAME",
    "access": null,
    "export": false,
    "importPath": "timber/src/transports/https.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 62,
    "kind": "variable",
    "name": "PATH",
    "memberof": "src/transports/https.js",
    "static": true,
    "longname": "src/transports/https.js~PATH",
    "access": null,
    "export": false,
    "importPath": "timber/src/transports/https.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 63,
    "kind": "variable",
    "name": "CONTENT_TYPE",
    "memberof": "src/transports/https.js",
    "static": true,
    "longname": "src/transports/https.js~CONTENT_TYPE",
    "access": null,
    "export": false,
    "importPath": "timber/src/transports/https.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 64,
    "kind": "variable",
    "name": "USER_AGENT",
    "memberof": "src/transports/https.js",
    "static": true,
    "longname": "src/transports/https.js~USER_AGENT",
    "access": null,
    "export": false,
    "importPath": "timber/src/transports/https.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 65,
    "kind": "variable",
    "name": "PORT",
    "memberof": "src/transports/https.js",
    "static": true,
    "longname": "src/transports/https.js~PORT",
    "access": null,
    "export": false,
    "importPath": "timber/src/transports/https.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 66,
    "kind": "class",
    "name": "HTTPS",
    "memberof": "src/transports/https.js",
    "static": true,
    "longname": "src/transports/https.js~HTTPS",
    "access": null,
    "export": true,
    "importPath": "timber/src/transports/https.js",
    "importStyle": "HTTPS",
    "description": "A highly efficient stream for sending logs to Timber via HTTPS. It uses batches,\nkeep-alive connections (and in the future maybe msgpack) to deliver logs with high-throughput\nand little overhead. It also implements the Stream.Writable interface so that it can be treated\nlike a stream. This is beneficial when using something like Morgan, where you can pass a custom stream.",
    "lineNumber": 17,
    "interface": false,
    "extends": [
      "stream~Writable"
    ]
  },
  {
    "__docId__": 67,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/transports/https.js~HTTPS",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/transports/https.js~HTTPS#constructor",
    "access": null,
    "description": "",
    "lineNumber": 24,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "apiKey",
        "description": "Timber API Key"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "Various options to adjust the stream behavior."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "1000",
        "defaultRaw": 1000,
        "name": "options.flushInterval",
        "description": "How often, in milliseconds, the messages written to the stream should be delivered to Timber."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "options.httpsAgent",
        "description": "Your own custom https.Agent. We use agents to maintain connection pools and keep the connections alive. This avoids the initial connection overhead every time we want to communicate with Timber. See https.Agent for options."
      }
    ]
  },
  {
    "__docId__": 68,
    "kind": "member",
    "name": "acceptsObject",
    "memberof": "src/transports/https.js~HTTPS",
    "static": false,
    "longname": "src/transports/https.js~HTTPS#acceptsObject",
    "access": null,
    "description": null,
    "lineNumber": 40,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 69,
    "kind": "member",
    "name": "apiKey",
    "memberof": "src/transports/https.js~HTTPS",
    "static": false,
    "longname": "src/transports/https.js~HTTPS#apiKey",
    "access": null,
    "description": null,
    "lineNumber": 41,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 70,
    "kind": "member",
    "name": "hostName",
    "memberof": "src/transports/https.js~HTTPS",
    "static": false,
    "longname": "src/transports/https.js~HTTPS#hostName",
    "access": null,
    "description": null,
    "lineNumber": 42,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 71,
    "kind": "member",
    "name": "path",
    "memberof": "src/transports/https.js~HTTPS",
    "static": false,
    "longname": "src/transports/https.js~HTTPS#path",
    "access": null,
    "description": null,
    "lineNumber": 43,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 72,
    "kind": "member",
    "name": "port",
    "memberof": "src/transports/https.js~HTTPS",
    "static": false,
    "longname": "src/transports/https.js~HTTPS#port",
    "access": null,
    "description": null,
    "lineNumber": 44,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 73,
    "kind": "member",
    "name": "flushInterval",
    "memberof": "src/transports/https.js~HTTPS",
    "static": false,
    "longname": "src/transports/https.js~HTTPS#flushInterval",
    "access": null,
    "description": null,
    "lineNumber": 45,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 74,
    "kind": "member",
    "name": "httpsAgent",
    "memberof": "src/transports/https.js~HTTPS",
    "static": false,
    "longname": "src/transports/https.js~HTTPS#httpsAgent",
    "access": null,
    "description": null,
    "lineNumber": 46,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 75,
    "kind": "member",
    "name": "httpsClient",
    "memberof": "src/transports/https.js~HTTPS",
    "static": false,
    "longname": "src/transports/https.js~HTTPS#httpsClient",
    "access": null,
    "description": null,
    "lineNumber": 51,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 76,
    "kind": "method",
    "name": "_writev",
    "memberof": "src/transports/https.js~HTTPS",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/transports/https.js~HTTPS#_writev",
    "access": null,
    "description": "_writev is a Stream.Writeable methods that, if present, will write multiple chunks of\ndata off of the buffer. Defining it means we do not need to define _write.",
    "lineNumber": 71,
    "params": [
      {
        "name": "chunks",
        "types": [
          "*"
        ]
      },
      {
        "name": "next",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 77,
    "kind": "method",
    "name": "_write",
    "memberof": "src/transports/https.js~HTTPS",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/transports/https.js~HTTPS#_write",
    "access": null,
    "description": null,
    "lineNumber": 120,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "chunk",
        "types": [
          "*"
        ]
      },
      {
        "name": "encoding",
        "types": [
          "*"
        ]
      },
      {
        "name": "next",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 78,
    "kind": "method",
    "name": "_flush",
    "memberof": "src/transports/https.js~HTTPS",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/transports/https.js~HTTPS#_flush",
    "access": null,
    "description": "Expressive function to flush the buffer contents. uncork flushes the buffer and write\nthe contents. Cork allows us to continue buffering the messages until the next flush.",
    "lineNumber": 128,
    "params": []
  },
  {
    "__docId__": 79,
    "kind": "method",
    "name": "_startFlusher",
    "memberof": "src/transports/https.js~HTTPS",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/transports/https.js~HTTPS#_startFlusher",
    "access": null,
    "description": "Interval to call _flush continuously. This ensures log lines get sent on this.flushInterval\nintervals.",
    "lineNumber": 140,
    "params": []
  },
  {
    "__docId__": 80,
    "kind": "file",
    "name": "src/transports/index.js",
    "content": "import HTTPS from './https'\n\nmodule.exports = { HTTPS }\n",
    "static": true,
    "longname": "src/transports/index.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 81,
    "kind": "file",
    "name": "src/utils/attach.js",
    "content": "import { Writable } from 'stream'\nimport Log from '../log'\nimport debug from './debug'\n\n/**\n * Attaches a transport stream to a writeable stream.\n *\n * @param {Array} transports - array of transports to attach to the stream\n * @param {Writable} toStream - the stream your transport will attach to\n * @param {Object} options - configuration options\n * @param {boolean} options.applyBackPressure\n */\nconst attach = (transports, toStream, { applyBackPressure = false } = {}) => {\n  // Ensure all the streams are Writable\n  for (let i = 0; i < transports.length; i++) {\n    if (!(transports[i] instanceof Writable)) {\n      throw new Error('stream must be of type Writable')\n    }\n  }\n\n  // Store refs to standard logging utilities\n  const originalWrite = toStream.write\n\n  debug(`attaching ${transports.length} transports to stream`)\n\n  toStream.write = (message, encoding, fd) => {\n    const log = message instanceof Log ? message : new Log(message)\n\n    for (let i = 0; i < transports.length; i++) {\n      const transport = transports[i]\n\n      // It's possible to pass the source stream as a transport,\n      // (i.e. if you want to have stdout logs output to stdout while using a transport)\n      // for this reason we need to check if the transport is identical\n      // to the source stream before writing to it, otherwise we'll cause a stack overflow.\n      const written = transport === toStream\n        ? // this condition preserves the ability to write to the original stream\n          originalWrite.apply(transport, [log.data.message])\n        : // and this writes to a separate transport stream\n          transport.write(\n            transport.acceptsObject ? log.data : log.data.message,\n            encoding,\n            fd\n          )\n\n      if (!written && applyBackPressure) {\n        transport.once('drain', () => transport.write(...arguments))\n      }\n    }\n  }\n\n  return {\n    detach: () => {\n      toStream.write = originalWrite\n    },\n  }\n}\n\nexport default attach\n",
    "static": true,
    "longname": "src/utils/attach.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 82,
    "kind": "function",
    "name": "attach",
    "memberof": "src/utils/attach.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/attach.js~attach",
    "access": null,
    "export": true,
    "importPath": "timber/src/utils/attach.js",
    "importStyle": "attach",
    "description": "Attaches a transport stream to a writeable stream.",
    "lineNumber": 13,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "transports",
        "description": "array of transports to attach to the stream"
      },
      {
        "nullable": null,
        "types": [
          "Writable"
        ],
        "spread": false,
        "optional": false,
        "name": "toStream",
        "description": "the stream your transport will attach to"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "configuration options"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "options.applyBackPressure",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "{\"detach\": *}"
      ]
    }
  },
  {
    "__docId__": 83,
    "kind": "file",
    "name": "src/utils/debug.js",
    "content": "import util from 'util'\nimport config from '../config'\n\n/**\n * Convenience function for retrieving a reference to\n * the debug_logger stream.\n *\n * @private\n */\nexport const debug_logger = () => config.debug_logger\n\n/**\n * Generate a timestamp string to use in debug lines\n *\n * @private\n */\nconst timestamp = () => new Date().toISOString()\n\n/**\n * Convenience function for logging debug messages\n * to the configured debug_logger\n *\n * This works much like the builtin console.log function,\n * accepting any amount of mixed arguments and concatenating\n * them into a single string to be sent to the debug_logger stream\n *\n * @private\n * @param {...*} args\n */\nconst debug = (...args) => {\n  if (debug_logger()) {\n    debug_logger().write(`[${timestamp()}]: ${util.format.apply(null, args)}\\n`)\n  }\n}\n\nexport default debug\n",
    "static": true,
    "longname": "src/utils/debug.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 84,
    "kind": "function",
    "name": "debug_logger",
    "memberof": "src/utils/debug.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/debug.js~debug_logger",
    "access": "private",
    "export": true,
    "importPath": "timber/src/utils/debug.js",
    "importStyle": "{debug_logger}",
    "description": "Convenience function for retrieving a reference to\nthe debug_logger stream.",
    "lineNumber": 10,
    "params": []
  },
  {
    "__docId__": 85,
    "kind": "function",
    "name": "timestamp",
    "memberof": "src/utils/debug.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/debug.js~timestamp",
    "access": "private",
    "export": false,
    "importPath": "timber/src/utils/debug.js",
    "importStyle": null,
    "description": "Generate a timestamp string to use in debug lines",
    "lineNumber": 17,
    "params": []
  },
  {
    "__docId__": 86,
    "kind": "function",
    "name": "debug",
    "memberof": "src/utils/debug.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/debug.js~debug",
    "access": "private",
    "export": true,
    "importPath": "timber/src/utils/debug.js",
    "importStyle": "debug",
    "description": "Convenience function for logging debug messages\nto the configured debug_logger\n\nThis works much like the builtin console.log function,\naccepting any amount of mixed arguments and concatenating\nthem into a single string to be sent to the debug_logger stream",
    "lineNumber": 30,
    "params": [
      {
        "nullable": null,
        "types": [
          "...*"
        ],
        "spread": true,
        "optional": false,
        "name": "args",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 88,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Infinity",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 89,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~NaN",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 90,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~undefined",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 91,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~null",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 92,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Object",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 93,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~object",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 94,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Function",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 95,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~function",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 96,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Boolean",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 97,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~boolean",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 98,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Symbol",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 99,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Error",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 100,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~EvalError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 101,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~InternalError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 102,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~RangeError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 103,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~ReferenceError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 104,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~SyntaxError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 105,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~TypeError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 106,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~URIError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 107,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Number",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 108,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~number",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 109,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Date",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 110,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~String",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 111,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~string",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 112,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~RegExp",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 113,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 114,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Int8Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 115,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint8Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 116,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint8ClampedArray",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 117,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Int16Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 118,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint16Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 119,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Int32Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 120,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint32Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 121,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Float32Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 122,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Float64Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 123,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Map",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 124,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Set",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 125,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~WeakMap",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 126,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~WeakSet",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 127,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~ArrayBuffer",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 128,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~DataView",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 129,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~JSON",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 130,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Promise",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 131,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Generator",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 132,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~GeneratorFunction",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 133,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Reflect",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 134,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Proxy",
    "access": null,
    "description": "",
    "lineNumber": 193,
    "builtinExternal": true
  },
  {
    "__docId__": 136,
    "kind": "external",
    "name": "CanvasRenderingContext2D",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "static": true,
    "longname": "BuiltinExternal/WebAPIExternal.js~CanvasRenderingContext2D",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 137,
    "kind": "external",
    "name": "DocumentFragment",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/DocumentFragment",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "static": true,
    "longname": "BuiltinExternal/WebAPIExternal.js~DocumentFragment",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 138,
    "kind": "external",
    "name": "Element",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/Element",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "static": true,
    "longname": "BuiltinExternal/WebAPIExternal.js~Element",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 139,
    "kind": "external",
    "name": "Event",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/Event",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "static": true,
    "longname": "BuiltinExternal/WebAPIExternal.js~Event",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 140,
    "kind": "external",
    "name": "Node",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/Node",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "static": true,
    "longname": "BuiltinExternal/WebAPIExternal.js~Node",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 141,
    "kind": "external",
    "name": "NodeList",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/NodeList",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "static": true,
    "longname": "BuiltinExternal/WebAPIExternal.js~NodeList",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 142,
    "kind": "external",
    "name": "XMLHttpRequest",
    "externalLink": "https://developer.mozilla.org/en/docs/Web/API/XMLHttpRequest",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "static": true,
    "longname": "BuiltinExternal/WebAPIExternal.js~XMLHttpRequest",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 143,
    "kind": "external",
    "name": "AudioContext",
    "externalLink": "https://developer.mozilla.org/en/docs/Web/API/AudioContext",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "static": true,
    "longname": "BuiltinExternal/WebAPIExternal.js~AudioContext",
    "access": null,
    "description": "",
    "lineNumber": 34,
    "builtinExternal": true
  }
]